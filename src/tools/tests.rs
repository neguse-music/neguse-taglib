#[test]
fn int_encode_test() {
    use crate::tools::{encode_int_be_u32, encode_int_le_u32};
    assert_eq!(&encode_int_be_u32(0x12345678), &[0x12, 0x34, 0x56, 0x78]);
    assert_eq!(&encode_int_le_u32(0x12345678), &[0x78, 0x56, 0x34, 0x12]);
}

#[test]
fn int_be_test() {
    use crate::tools::decode_int_be_u32;
    assert_eq!(decode_int_be_u32(&[0x7f, 0x7f, 0x7f, 0x7f]), 0x7f7f7f7f);
    assert_eq!(decode_int_be_u32(&[0x01, 0x7f]), 0x017f);
}
#[test]
fn int_le_test() {
    use crate::tools::decode_int_le_u32;
    assert_eq!(decode_int_le_u32(&[0x78, 0x56, 0x34, 0x12]), 0x12345678);
    assert_eq!(decode_int_le_u32(&[0x01, 0x7F]), 0x7F01);
}

#[test]
fn utf16_decode_test() {
    use crate::tools::encoding::decode_utf16;
    let utf16be: [u8; 5 * 2] = [0xFE, 0xFF, 0x00, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74];
    let utf16le: [u8; 5 * 2] = [0xFF, 0xFE, 0x54, 0x00, 0x65, 0x00, 0x73, 0x00, 0x74, 0x00];
    let longstr = [
        0x30, 0x53, 0x30, 0x93, 0x30, 0x6B, 0x30, 0x61, 0x30, 0x6F, 0x30, 0x02, 0x30, 0x66, 0x30,
        0x59, 0x30, 0x68, 0x30, 0x67, 0x30, 0x59, 0x30, 0x88, 0xFF, 0x5E, 0x30, 0x00, 0xD8, 0x3D,
        0xDC, 0x40,
    ];

    assert_eq!(decode_utf16(&utf16be), "Test");
    assert_eq!(decode_utf16(&utf16le), "Test");
    assert_eq!(decode_utf16(&longstr), "こんにちは。てすとですよ～　👀");
}
